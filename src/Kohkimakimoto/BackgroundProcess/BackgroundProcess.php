<?php
namespace Kohkimakimoto\BackgroundProcess;

use Symfony\Component\Filesystem\Filesystem;

/**
 *
 * @author Kohki Makimoto
 */
class BackgroundProcess
{
    protected $process;

    protected $backendProcessKey;

    protected $workingDirectory;

    protected $jsonPath;

    protected $processPHPPath;

    protected $filePrefix;

    /**
     * Constractor.
     *
     * @param unknown $commandline
     * @param string $cwd
     * @param array $env
     * @param string $stdin
     * @param number $timeout
     * @param array $options
     */
    public function __construct($commandline)
    {
      $this->commandline = $commandline;
      $this->workingDirectory = "/tmp/php/background_process";
      $this->filePrefix = "process.";
    }

    /**
     * Run the process.
     */
    public function run()
    {
      $this->writeProcessPHPFile();
      $command = $this->getBackgroundProcessingRunCommand();
      exec($command);
    }

    public function writeProcessPHPFile()
    {
      $fs = new Filesystem();
      $dir = rtrim($this->getWorkingDirectory(), "/");
      $key = $this->getBackgroundProcessKey();
      $prefix = $this->filePrefix;

      if (!$fs->exists($dir)) {
        // create directory.
        $fs->mkdir($dir, 0777);
      }


      $path = $dir."/".$prefix.$key.".php";
      if ($fs->exists($path)) {
        throw new Exception("$path is already exists.");
      }

      $currentUmask = umask();
      umask(0000);

      if (!$fp = @fopen($path, 'wb')) {
        throw new sfCacheException(sprintf('Unable to write cache file "%s".', $tmpFile));
      }

      $commandline = $this->commandline;
      $contents =<<<EOF
<?php
//
// This file was generated by Kohkimakimoto/BackgroundProcess automatically.
//
\$key = "$key";
\$pid = posix_getpid();
\$meta = json_encode(array(
    "key" => \$key,
    "pid" => \$pid
));
\$metaPath = __DIR__."/${prefix}${key}.json";

// Put meta file to save pid.
file_put_contents(\$metaPath, \$meta);

exec("$commandline");

// Delete meta file and self;
unlink(\$metaPath);
unlink(__FILE__);

EOF;

      @fwrite($fp, $contents);
      @fclose($fp);

      umask($currentUmask);

      $this->processPHPPath = $path;
      return $this->processPHPPath;
    }

    public function writeMetaJsonFile()
    {
      $fs = new Filesystem();
      $dir = rtrim($this->getWorkingDirectory(), "/");
      $key = $this->getBackgroundProcessKey();

      if (!$fs->exists($dir)) {
        // create directory.
        $fs->mkdir($dir, 0777);
      }

      $path = $dir."/process.".$key.".json";
      if ($fs->exists($path)) {
        throw new Exception("$path is already exists.");
      }

      $currentUmask = umask();
      umask(0000);

      if (!$fp = @fopen($path, 'wb')) {
        throw new sfCacheException(sprintf('Unable to write cache file "%s".', $tmpFile));
      }

      $contents =json_encode(array(
          "key" => "$key",
          "commandline" => $this->commandline,
          "pid" => null,
      ));

      @fwrite($fp, $contents);
      @fclose($fp);

      umask($currentUmask);

      $this->jsonPath = $path;
      return $this->jsonPath;
    }

    public function appendPidToMetaJsonFile($pid)
    {
      $path = $this->jsonPath;
      if (!$fp = @fopen($path, 'wb')) {
        throw new sfCacheException(sprintf('Unable to write cache file "%s".', $tmpFile));
      }

      $key = $this->getBackgroundProcessKey();

      $contents =json_encode(array(
          "key" => "$key",
          "commandline" => $this->commandline,
          "pid" => $pid,
      ));

      @fwrite($fp, $contents);
      @fclose($fp);
    }


    /**
     * Generate unique key for indentifing background process.
     */
    public function getBackgroundProcessKey()
    {
      if (!$this->backendProcessKey) {
        $this->backendProcessKey = uniqid(getmypid());
      }
      return $this->backendProcessKey;
    }

    public function getBackgroundProcessingRunCommand()
    {
      return sprintf('nohup php %s > /dev/null 2>&1 < /dev/null &', $this->processPHPPath);
      // return sprintf('nohup php %s > /dev/null 2>&1 < /dev/null & echo $!', $this->processPHPPath);
    }

    public function getWorkingDirectory()
    {
      return $this->workingDirectory;
    }
}
