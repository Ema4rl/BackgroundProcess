<?php
namespace Kohkimakimoto\BackgroundProcess;

use Symfony\Component\Filesystem\Filesystem;
use Kohkimakimoto\BackgroundProcess\BackgroundProcessManager;

/**
 * BackgroundProcess
 * @author Kohki Makimoto <kohki.makimoto@gmail.com>
 */
class BackgroundProcess
{
    protected $manager;

    protected $key;

    protected $meta;

    /**
     * Constractor.
     *
     * @param string $commandline Commandline to run
     * @param array  $options Options to set environment.
     * @param string $key unique key of the process.
     */
    public function __construct($commandline, $options = array(), $meta = array())
    {
      $this->commandline = $commandline;

      if ($options instanceof BackgroundProcessManager) {
        $this->manager = $options;
      } else {
        $this->manager = new BackgroundProcessManager($options);
      }

      // Set up meta and key
      if ($meta) {
        $this->key =  $meta['key'];
        $this->meta = $meta;
      } else {
        $this->key = $this->generateKey();
        $this->meta = array('key' => $this->key, 'commandline' => $this->commandline);
      }
    }

    /**
     * Run the process.
     */
    public function run()
    {
      $this->writeExecutablePHPFile();
      $command = $this->getBackgroundProcessingRunCommand();
      exec($command);
    }

    /**
     * Write Executable PHP file to run the process in background.
     * @throws Exception
     */
    public function writeExecutablePHPFile()
    {
      $fs = new Filesystem();
      $path = $this->getExecutablePHPFilePath();

      $currentUmask = umask();
      umask(0000);

      if (!$fs->exists(dirname($path))) {
        $fs->mkdir(dirname($path), 0777);
      }

      if ($fs->exists($path)) {
        throw new Exception("Executable PHP file $path is already exists.");
      }

      if (!$fp = @fopen($path, 'wb')) {
        throw new Exception("Unable to write to $path.");
      }

      $commandline = $this->getCommandline();
      $key = $this->getKey();

      $contents =<<<EOF
<?php
//
// This file was generated by Kohkimakimoto/BackgroundProcess automatically.
//
\$key = "$key";
\$pid = posix_getpid();
\$createdAt = new \DateTime();
\$commandline = "$commandline";
\$meta = json_encode(array(
    "key" => \$key,
    "pid" => \$pid,
    "commandline" => \$commandline,
    "created_at" => \$createdAt->format('Y-m-d H:i:s'),
));
\$metaPath = __DIR__."/${key}.json";

// Put meta file to save pid.
file_put_contents(\$metaPath, \$meta);

exec(\$commandline);

// Delete meta file and self;
unlink(\$metaPath);
unlink(__FILE__);

EOF;

      @fwrite($fp, $contents);
      @fclose($fp);

      umask($currentUmask);

      return $key;
    }

    public function getExecutablePHPFilePath()
    {
      $dir = rtrim($this->getManager()->getWorkingDirectory(), "/");
      $key = $this->getKey();

      return $dir."/".$key.".php";
    }

    /**
     * Generate unique key for indentifing background process.
     */
    public function generateKey()
    {
      return $this->getManager()->getKeyPrefix().uniqid(getmypid());
    }

    /**
     * Get key
     */
    public function getKey()
    {
      return $this->key;
    }

    /**
     * Set key
     */
    public function setKey($key)
    {
      $this->key = $key;
    }

    /**
     * Get commandline.
     */
    public function getCommandline()
    {
      return $this->commandline;
    }

    /**
     * set commandline.
     */
    public function setCommandline($commandline)
    {
      $this->commandline = $commandline;
    }

    public function getBackgroundProcessingRunCommand()
    {
      return sprintf('nohup php %s > /dev/null 2>&1 < /dev/null &', $this->getExecutablePHPFilePath());
    }

    public function getManager()
    {
      return $this->manager;
    }

    public function setManager($manager)
    {
      $this->manager = $manager;
    }

    public function getMeta()
    {
      return $this->meta;
    }

    public function setMeta($meta)
    {
      $this->meta = $meta;
    }

}

